import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Queue;
import java.util.Stack;
import java.util.TreeSet;

public class Main {
	static int MAX_COMMANDS = 0;
	static int START_SIDE_SIZE = 6;
	static int END_SIDE_SIZE = 6;
	static String[] endSide = new String[END_SIDE_SIZE];
	static String[] startSide = new String[START_SIDE_SIZE];
	static String[] boat = new String[2];
	static String[] commands = new String[MAX_COMMANDS];
	static boolean isBoatOnStartSide = true;
	static List<Action> curList = new LinkedList<Action>();
	static List<Action> pastList = new LinkedList<Action>();
	static boolean noError = true;
	
	static LinkedList<Node> list = new LinkedList<Node>();
	static Node initialNode = new Node(3, 3, 0, 0, true, null);

	public static void main(String[] args) {
		list.add(initialNode);
		
		
		while (true) {
			Node testNode = list.pop();
			if (!isDone(testNode)) {
				if ( testNode.isOnRightSide) {
					list.add(new Node(testNode.cr - 1, testNode.mr, testNode.cl + 1, testNode.ml, false, testNode));
					list.add(new Node(testNode.cr, testNode.mr - 1, testNode.cl, testNode.ml + 1, false, testNode));
					list.add(new Node(testNode.cr - 2, testNode.mr, testNode.cl + 2 , testNode.ml, false, testNode));
					list.add(new Node(testNode.cr , testNode.mr - 2, testNode.cl, testNode.ml + 2, false, testNode));
					list.add(new Node(testNode.cr - 1, testNode.mr - 1 , testNode.cl + 1, testNode.ml + 1, false, testNode));
				}else if( !testNode.isOnRightSide) {
					list.add(new Node(testNode.cr + 1, testNode.mr, testNode.cl - 1, testNode.ml, true, testNode));
					list.add(new Node(testNode.cr, testNode.mr + 1, testNode.cl, testNode.ml - 1, true, testNode));
					list.add(new Node(testNode.cr + 2, testNode.mr, testNode.cl - 2 , testNode.ml, true, testNode));
					list.add(new Node(testNode.cr , testNode.mr + 2, testNode.cl, testNode.ml - 2, true, testNode));
					list.add(new Node(testNode.cr + 1, testNode.mr + 1 , testNode.cl - 1, testNode.ml - 1, true, testNode));
				}
				
			}else {
				System.out.println("DONE" + testNode.toString());
			}
		}
	}

	private static Action getCurrentAction() {
		// TODO Auto-generated method stub
		return null;
	}

	private static boolean isGoalMet() {
		if (!missionaryMajority(endSide)) {
			return false;
		} else {
			return missionaryMajority(startSide) && noError;
		}
	}

	private static boolean missionaryMajority(String[] side) {
		int c = 0, m = 0;
		for (String str : side) {
			if (str.equals("C"))
				c++;
			else if (str.equals("M")) {
				m++;
			}
		}
		if (c > m) {
			return false;
		}
		return true;
	}

	private static boolean isDone(Node n) {
		
		if (n.cl == 3 && n.ml == 3) {
			return true;
		}
		return false;
	}

	private static void putInBoat(String manOne, String manTwo) {
		putInBoat(manOne);
		putInBoat(manTwo);
	}

	private static void putInBoat(String man) {
		if (man == "C") {
			if (isBoatOnStartSide) {
				boolean put = false;
				for (int i = 0; i < START_SIDE_SIZE; i++) {
					if (startSide[i].equals("C")) {
						startSide[i] = "";
						put = true;
						if (boat[0].isEmpty()) {
							boat[0] = "C";
						} else if (boat[1].isEmpty()) {
							boat[1] = "C";
						}
					}
				}
				if (!put)
					noError = false;
			} else {
				boolean put = false;
				for (int i = 0; i < END_SIDE_SIZE; i++) {
					if (endSide[i].equals("C")) {
						endSide[i] = "";
						put = true;
						if (boat[0].isEmpty()) {
							boat[0] = "C";
						} else if (boat[1].isEmpty()) {
							boat[1] = "C";
						}
					}
				}
				if (!put)
					noError = false;
			}
		} else if (man == "M") {
			if (isBoatOnStartSide) {
				boolean put = false;
				for (int i = 0; i < START_SIDE_SIZE; i++) {
					if (startSide[i].equals("M")) {
						startSide[i] = "";
						put = true;
						if (boat[0].isEmpty()) {
							boat[0] = "M";
						} else if (boat[1].isEmpty()) {
							boat[1] = "M";
						}
					}
				}
				if (!put)
					noError = false;
			} else {
				boolean put = false;
				for (int i = 0; i < END_SIDE_SIZE; i++) {
					if (endSide[i].equals("M")) {
						endSide[i] = "";
						put = true;
						if (boat[0].isEmpty()) {
							boat[0] = "M";
						} else if (boat[1].isEmpty()) {
							boat[1] = "M";
						}
					}
				}
				if (!put)
					noError = false;
			}
		}
	}

	private void removeFromBoat(String str) {
		boolean put = false;
		for (int x = 0; x < 2; x++) {
			if (boat[x].equals(str)) {
				boat[x] = "";
				put = true;
				if (this.isBoatOnStartSide) {
					for (int i = 0; i < START_SIDE_SIZE; i++) {
						if (startSide[i].isEmpty()) {
							startSide[i] = str;
						} 
					}
				} else {
					for (int i = 0; i < END_SIDE_SIZE; i++) {
						if (endSide[i].isEmpty()) {
							endSide[i] = str;
						} 
					}
				}
			}
		}
		if (!put)
			noError = false;
	}
}
